package com.example.android.multmedia.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.android.multmedia.personaldb.MediaDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDIA_DB".
*/
public class MediaDbDao extends AbstractDao<MediaDb, String> {

    public static final String TABLENAME = "MEDIA_DB";

    /**
     * Properties of entity MediaDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MediaPath = new Property(0, String.class, "mediaPath", true, "MEDIA_PATH");
        public final static Property MediaName = new Property(1, String.class, "mediaName", false, "MEDIA_NAME");
        public final static Property Size = new Property(2, long.class, "size", false, "SIZE");
        public final static Property Id = new Property(3, long.class, "id", false, "ID");
        public final static Property CreateTime = new Property(4, long.class, "createTime", false, "CREATE_TIME");
        public final static Property MediaType = new Property(5, int.class, "mediaType", false, "MEDIA_TYPE");
        public final static Property IsFavor = new Property(6, boolean.class, "isFavor", false, "IS_FAVOR");
        public final static Property PlayedTime = new Property(7, long.class, "playedTime", false, "PLAYED_TIME");
        public final static Property PlayedCounts = new Property(8, int.class, "playedCounts", false, "PLAYED_COUNTS");
    }


    public MediaDbDao(DaoConfig config) {
        super(config);
    }
    
    public MediaDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDIA_DB\" (" + //
                "\"MEDIA_PATH\" TEXT PRIMARY KEY NOT NULL ," + // 0: mediaPath
                "\"MEDIA_NAME\" TEXT," + // 1: mediaName
                "\"SIZE\" INTEGER NOT NULL ," + // 2: size
                "\"ID\" INTEGER NOT NULL ," + // 3: id
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 4: createTime
                "\"MEDIA_TYPE\" INTEGER NOT NULL ," + // 5: mediaType
                "\"IS_FAVOR\" INTEGER NOT NULL ," + // 6: isFavor
                "\"PLAYED_TIME\" INTEGER NOT NULL ," + // 7: playedTime
                "\"PLAYED_COUNTS\" INTEGER NOT NULL );"); // 8: playedCounts
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDIA_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MediaDb entity) {
        stmt.clearBindings();
 
        String mediaPath = entity.getMediaPath();
        if (mediaPath != null) {
            stmt.bindString(1, mediaPath);
        }
 
        String mediaName = entity.getMediaName();
        if (mediaName != null) {
            stmt.bindString(2, mediaName);
        }
        stmt.bindLong(3, entity.getSize());
        stmt.bindLong(4, entity.getId());
        stmt.bindLong(5, entity.getCreateTime());
        stmt.bindLong(6, entity.getMediaType());
        stmt.bindLong(7, entity.getIsFavor() ? 1L: 0L);
        stmt.bindLong(8, entity.getPlayedTime());
        stmt.bindLong(9, entity.getPlayedCounts());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MediaDb entity) {
        stmt.clearBindings();
 
        String mediaPath = entity.getMediaPath();
        if (mediaPath != null) {
            stmt.bindString(1, mediaPath);
        }
 
        String mediaName = entity.getMediaName();
        if (mediaName != null) {
            stmt.bindString(2, mediaName);
        }
        stmt.bindLong(3, entity.getSize());
        stmt.bindLong(4, entity.getId());
        stmt.bindLong(5, entity.getCreateTime());
        stmt.bindLong(6, entity.getMediaType());
        stmt.bindLong(7, entity.getIsFavor() ? 1L: 0L);
        stmt.bindLong(8, entity.getPlayedTime());
        stmt.bindLong(9, entity.getPlayedCounts());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MediaDb readEntity(Cursor cursor, int offset) {
        MediaDb entity = new MediaDb( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mediaPath
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mediaName
            cursor.getLong(offset + 2), // size
            cursor.getLong(offset + 3), // id
            cursor.getLong(offset + 4), // createTime
            cursor.getInt(offset + 5), // mediaType
            cursor.getShort(offset + 6) != 0, // isFavor
            cursor.getLong(offset + 7), // playedTime
            cursor.getInt(offset + 8) // playedCounts
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MediaDb entity, int offset) {
        entity.setMediaPath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMediaName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSize(cursor.getLong(offset + 2));
        entity.setId(cursor.getLong(offset + 3));
        entity.setCreateTime(cursor.getLong(offset + 4));
        entity.setMediaType(cursor.getInt(offset + 5));
        entity.setIsFavor(cursor.getShort(offset + 6) != 0);
        entity.setPlayedTime(cursor.getLong(offset + 7));
        entity.setPlayedCounts(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MediaDb entity, long rowId) {
        return entity.getMediaPath();
    }
    
    @Override
    public String getKey(MediaDb entity) {
        if(entity != null) {
            return entity.getMediaPath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MediaDb entity) {
        return entity.getMediaPath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
